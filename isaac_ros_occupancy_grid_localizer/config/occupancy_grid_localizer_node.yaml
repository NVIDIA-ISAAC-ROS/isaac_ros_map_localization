%YAML 1.2
# SPDX-FileCopyrightText: NVIDIA CORPORATION & AFFILIATES
# Copyright (c) 2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
---
###############
# Cuda Stream #
###############
name: cuda_stream
components:
- name: cuda_stream
  type: nvidia::isaac::CudaStream
  parameters:
    allocate_stream: true
---
###############################
# Binary Occupancy Map Loader #
###############################
name: binary_occupancy_map_loader
components:
- name: binary_occupancy_map
  type: nvidia::gxf::Tensor
- name: host_allocator
  type: nvidia::gxf::UnboundedAllocator
- name: device_allocator
  type: nvidia::gxf::UnboundedAllocator
- name: image_loader
  type: nvidia::isaac::ImageLoader
  parameters:
    allocator: host_allocator
    tensor: binary_occupancy_map
    # Will be overidden with png file in ROS Param yaml file specified in ROS parameter 'map_yaml_path'
    filename: ""
- name: occupancy_grid_map
  type: nvidia::isaac::OccupancyGridMap
  parameters:
    cell_size: 0.05 # Will be overidden with ROS parameter 'resolution'
    threshold: 200 # Will be overidden with ROS parameter 'occupancy_grid_map_threshold'
    binary_occupancy_map_tensor: binary_occupancy_map
    map_frame: global_pose_tree/map_frame
    device_allocator: device_allocator
- type: nvidia::gxf::CountSchedulingTerm
  parameters:
    count: 1
---
##################
# Atlas Frontend #
##################
name: atlas
components:
  - name: frontend
    type: nvidia::isaac::AtlasFrontend
    parameters:
      pose_tree: global_pose_tree/pose_tree
      occupancy_grid_map: binary_occupancy_map_loader/occupancy_grid_map
---
#################################
# Binary Occupancy Map Provider #
#################################
name: occupancy_2d_map_provider
components:
  - name: occupancy_2d_map_provider
    type: nvidia::isaac::localization::Occupancy2DMapProvider
    parameters:
      atlas: atlas/frontend
      map_frame: global_pose_tree/map_frame
      world_frame: global_pose_tree/world_frame
---
###########################################
# Localization to Pose3D Format Converter #
###########################################
name: localization_to_pose3d
components:
  - name: rx_localization_result
    type: nvidia::gxf::DoubleBufferReceiver
    parameters:
      policy: 0
  - name: allocator
    type: nvidia::gxf::BlockMemoryPool
    parameters:
      storage_type: 0
      block_size: 1000
      num_blocks: 4
  - name: message_scheduling_term
    type: nvidia::gxf::MessageAvailableSchedulingTerm
    parameters:
      receiver: rx_localization_result
      min_size: 1
  - name: tx_pose3d_cov
    type: nvidia::gxf::DoubleBufferTransmitter
    parameters:
      policy: 0
  - name: localization_to_pose3d
    type: nvidia::isaac::localization::LocalizationToPose3d
    parameters:
      rx_localization_result: rx_localization_result
      tx_pose3d_cov: tx_pose3d_cov
      allocator: allocator
---
#######################
# Global Localization #
#######################
name: global_localization
components:
- name: rx_flatscan
  type: nvidia::gxf::DoubleBufferReceiver
  parameters:
    policy: 0
- name: message_scheduling_term
  type: nvidia::gxf::MessageAvailableSchedulingTerm
  parameters:
    receiver: rx_flatscan
    min_size: 1
- name: rx_reset_signal
  type: nvidia::gxf::DoubleBufferReceiver
  parameters:
    policy: 0
- name: message_scheduling_term
  type: nvidia::gxf::MessageAvailableSchedulingTerm
  parameters:
    receiver: rx_reset_signal
    min_size: 1
- name: tx_localization_result
  type: nvidia::gxf::DoubleBufferTransmitter
  parameters:
    policy: 0
- name: grid_search_localizer
  type: nvidia::isaac::localization::GridSearchLocalizer
  parameters:
    dummy_rx: rx_flatscan
    flatscan_receivers: [rx_flatscan]
    rx_reset_signal: rx_reset_signal
    atlas: atlas/frontend
    robot_frame: global_pose_tree/robot_frame
    world_frame: global_pose_tree/world_frame
    tx_localization_result: tx_localization_result
    occupancy_2d_map_provider: occupancy_2d_map_provider/occupancy_2d_map_provider
    robot_radius: 0.25
    max_beam_error: 0.5
    max_output_error: 0.40 # 0.35
    min_output_error: 0.22
    num_beams_gpu: 512
    batch_size: 512
    sample_distance: 0.1
    patch_size: [512, 512]
    out_of_range_threshold: 100.0
    invalid_range_threshold: 0.0
    min_scan_fov_degrees: 100.0 # 270.0
    use_closest_beam: true
---
name: broadcaster
components:
- type: nvidia::gxf::Broadcast
  parameters:
    source: rx_flatscan
- name: rx_flatscan
  type: nvidia::gxf::DoubleBufferReceiver
  parameters:
    capacity: 1
    policy: 0
- type: nvidia::gxf::MessageAvailableSchedulingTerm
  parameters:
    receiver: rx_flatscan
    min_size: 1
- name: tx_reset_signal
  type: nvidia::gxf::DoubleBufferTransmitter
  parameters:
    capacity: 1
- type: nvidia::gxf::DownstreamReceptiveSchedulingTerm
  parameters:
    transmitter: tx_reset_signal
    min_size: 1
- name: tx_flatscan
  type: nvidia::gxf::DoubleBufferTransmitter
  parameters:
    capacity: 1
- type: nvidia::gxf::DownstreamReceptiveSchedulingTerm
  parameters:
    transmitter: tx_flatscan
    min_size: 1
---
name: flatscan_beams_tensor_copier
components:
- name: rx_flatscan
  type: nvidia::gxf::DoubleBufferReceiver
- name: tx_flatscan
  type: nvidia::gxf::DoubleBufferTransmitter
- type: nvidia::gxf::DownstreamReceptiveSchedulingTerm
  parameters:
    transmitter: tx_flatscan
    min_size: 1
- type: nvidia::gxf::MessageAvailableSchedulingTerm
  parameters:
    receiver: rx_flatscan
    min_size: 1
- name: allocator
  type: nvidia::gxf::BlockMemoryPool
  parameters:
    storage_type: 0
    block_size: 19200000
    num_blocks: 120
- name: tensor_copier
  type: nvidia::isaac::TensorCopier
  parameters:
    receiver: rx_flatscan
    transmitter: tx_flatscan
    tensor_name: beams
    rx_memory_type: 1
    tx_memory_type: 0
    allocator: allocator
    cuda_stream: cuda_stream/cuda_stream
---
name: sink
components:
- name: signal
  type: nvidia::gxf::DoubleBufferReceiver
  parameters:
    capacity: 1
    policy: 0
- type: nvidia::gxf::MessageAvailableSchedulingTerm
  parameters:
    receiver: signal
    min_size: 1
- name: sink
  type: nvidia::isaac_ros::MessageRelay
  parameters:
    source: signal
---
components:
- name: edge0
  type: nvidia::gxf::Connection
  parameters:
    source: flatscan_beams_tensor_copier/tx_flatscan
    target: broadcaster/rx_flatscan
- name: edge1
  type: nvidia::gxf::Connection
  parameters:
    source: broadcaster/tx_flatscan
    target: global_localization/rx_flatscan
- name: edge2
  type: nvidia::gxf::Connection
  parameters:
    source: broadcaster/tx_reset_signal
    target: global_localization/rx_reset_signal
- name: edge3
  type: nvidia::gxf::Connection
  parameters:
    source: global_localization/tx_localization_result
    target: localization_to_pose3d/rx_localization_result
- name: edge4
  type: nvidia::gxf::Connection
  parameters:
    source: localization_to_pose3d/tx_pose3d_cov
    target: sink/signal
---
components:
- name: clock
  type: nvidia::gxf::RealtimeClock
- type: nvidia::gxf::GreedyScheduler
  parameters:
    clock: clock
    stop_on_deadlock: false
    check_recession_period_us: 100
- type: nvidia::gxf::JobStatistics
  parameters:
    clock: clock
